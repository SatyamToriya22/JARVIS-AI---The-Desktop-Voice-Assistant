'''The Desktop Voice Assistant - Jarvis AIThis Jarvis Voice assistant works Wikipedia searches without opening web browsers,Opening Youtube ,Browser and performing many other daily tasks like playing music with the help of a single voice command.'''import pyttsx3                    #import python library which will help us to convert text to speechimport datetime                   #import datetime Moduleimport speech_recognition as sr   #import speech recognition that enable the recognition and translationimport wikipedia                  #import wikipedia which helps in extractinig Data from Wikipediaimport webbrowser                 #import web browser module which can access Web Browserimport os                         #import os module for making directory for playing Music from directoryimport random                     #import random module for playing random Songs from directoryimport goslate                    #import goslate for Translation of source language to Destination Languageengine=pyttsx3.init('sapi5')      #sapi is a Microsoft Speech APIvoices=engine.getProperty('voices')print(voices[1].id)engine.setProperty('voices',voices[1])# Define Speak Function which Speaks whatever  we calldef speak(audio):    engine.say(audio)    engine.runAndWait()# Define Now_Time function which speaks Current Timedef Now_Time():    time=datetime.datetime.now().hour    if  time<=12:        a_m=time        speak_time=f'Now Time is {(datetime.datetime.now().hour)} {datetime.datetime.now().minute} a.m'        speak(speak_time)    else:        p_m=time        speak_time = f'Now Time is {(datetime.datetime.now().hour)-12} {datetime.datetime.now().minute} p.m'        speak(speak_time)# Wish me Function Wishes as according to time when we say wish medef wish_me():    time=datetime.datetime.now().hour    if time<=12:        speak("Good Morning ")    elif 12<time<=16:        speak("Good After Noon ")    elif 16<time<=21:        speak("Good Evening ")    else:        speak("Good Night ")# It takes microphone input from the user and returns string outputdef take_Command():    print("")    r=sr.Recognizer()    with sr.Microphone() as source:        print("Listening..")        r.pause_threshold=0.8        r.adjust_for_ambient_noise(source, duration=1)        audio=r.listen(source,phrase_time_limit=3)    try:        print("Recognizing...")        query=r.recognize_google(audio,language='en-in')        print(f"You Mean : {query}\n")        speak('Okay I Do For You')    except Exception as e:        print("Say That Again.. ")        speak("Say That Again")        return 'None'    return query# Driver Codeif __name__=='__main__':    print("Welcome To Jarvis")    speak("Hiii I am Jarvis , How May I Help You")    while True :      query=take_Command().lower()      # Logic for executing tasks based on query      # Loops Break and Execution Stops      if 'stop' in query:          speak("Okay , I am Shutting Down")          break      # Speak about Jarvis      elif 'who are you' in query:          speak("I am Jarvis - Desktop Voice Assistant. This is Created By Satyam ")      # open Youtube in Browser by only command open Youtube      elif 'open youtube' in query:          speak('OKay Wait opening Youtube')          webbrowser.open('youtube.com')      # search anything in wikipedia by command Search searching word in wikipedia      elif 'wikipedia' in query :          speak('Searching Wikipedia...')          query=query.replace("wikipedia",'')          results=wikipedia.summary(query,sentences=2)          speak("According to Wikipedia")          print(results)          speak(results)      # Wishing function      elif 'wish me' in query:          wish_me()      # Speaks current Time      elif 'time now' in query:          speak(Now_Time())      # Open Google page in Default Browser      elif 'open google' in query :          speak('OKay Wait opening Google')          webbrowser.open('google.com')      # PLay Music or open file of Music through the given location in pc      elif 'play music' in query:          music_dir='E:\\Video songs'          songs=os.listdir(music_dir)          num=random.randint(0,len(songs)-1)          os.startfile(os.path.join(music_dir,songs[num]))          print(songs)      # Translate anything in Hindi using Google Translator API      elif 'translate' in query:          speak('Translation is')          gs=goslate.Goslate()          translate=gs.translate(query,'hi')          speak(translate)